package com.imd.vulnerabilityforecastidea.controllers;

import ai.djl.Application;
import ai.djl.MalformedModelException;
import ai.djl.Model;
import ai.djl.inference.Predictor;
import ai.djl.repository.zoo.ModelNotFoundException;
import ai.djl.repository.zoo.ZooModel;
import ai.djl.translate.TranslateException;
import com.imd.vulnerabilityforecastidea.dto.ModelInput;
import com.imd.vulnerabilityforecastidea.dto.ModelOutput;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ai.djl.repository.zoo.Criteria;

import java.io.IOException;
import java.nio.file.Paths;

@RestController
@RequestMapping("/forecast")
public class Vulnerability {

    public Vulnerability() {}

    private ModelOutput Predictor(ModelInput input) throws IOException, ModelNotFoundException, MalformedModelException, TranslateException {
        Criteria<ModelInput, ModelOutput> criteria = Criteria.builder()
                .optApplication(Application.CV.ANY)
                .setTypes(ModelInput.class, ModelOutput.class)
                .optModelUrls("https://github.com/dotnet/samples/raw/main/machine-learning/models/sentimentanalysis/sentiment_model.zip")
                .optModelName("model/sentimentmodel")
                .build();

        ZooModel<ModelInput, ModelOutput> model = criteria.loadModel();
        Predictor<ModelInput, ModelOutput> predictor = model.newPredictor();

        return predictor.predict(input);
    }

    @PostMapping("/predict")
    public ResponseEntity<ModelOutput> PostPredict(@RequestBody() ModelInput input) throws IOException, ModelNotFoundException, MalformedModelException, TranslateException {
        ModelOutput response = Predictor(input);

        System.out.println(response.Sentiment);

        return ResponseEntity
                .status(HttpStatus.OK)
                .body(response);
    }

    @GetMapping("/predict")
    public String Predict() {
        return "Predict funcionando";
    }
}


